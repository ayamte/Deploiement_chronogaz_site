services:            
  mongodb:            
    image: mongo:latest            
    container_name: chronogaz_mongo_db         
    restart: unless-stopped            
    ports:            
      - "27018:27017"            
    volumes:            
      - mongo_data:/data/db            
      - ./mongo-init:/docker-entrypoint-initdb.d:ro            
    environment:            
      MONGO_INITDB_ROOT_USERNAME: root            
      MONGO_INITDB_ROOT_PASSWORD: chronogaz123            
      MONGO_INITDB_DATABASE: chronogaz_db        
    healthcheck:            
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]            
      interval: 30s            
      timeout: 10s            
      retries: 3            
    networks:        
      - chronogaz-network        
            
  app:            
    build: ./api            
    container_name: chronogaz_app     
    restart: unless-stopped            
    ports:            
      - "5000:5000"            
    env_file:        
      - ./api/.env        
    depends_on:            
      mongodb:            
        condition: service_healthy            
    volumes:            
      - ./api:/app            
      - /app/node_modules        
    networks:        
      - chronogaz-network        
          
  frontend:          
    build: ./client          
    container_name: chronogaz_frontend    
    restart: unless-stopped          
    ports:          
      - "3000:3000"          
    environment:          
      - REACT_APP_API_URL=http://localhost:5000  
      - REACT_APP_SOCKET_URL=http://localhost:5000   
      - REACT_APP_GRAPHHOPPER_KEY=6fe731b8-5611-4fb5-afa2-da5059ae2564   
    volumes:          
      - ./client:/app          
      - /app/node_modules          
    depends_on:          
      - app        
    networks:        
      - chronogaz-network  
  
  nginx:  
    image: nginx:latest  
    container_name: chronogaz_nginx  
    restart: unless-stopped  
    ports:  
      - "80:80"  
      - "443:443"  
    volumes:  
      - /home/ubuntu/nginx/nginx.conf:/etc/nginx/nginx.conf:ro  
      - /home/ubuntu/nginx/ssl:/etc/nginx/ssl:ro  
      - /home/ubuntu/certbot/www:/var/www/certbot:ro  
    depends_on:  
      - app  
      - frontend  
    networks:  
      - chronogaz-network  
  
  # Prometheus - Collecte de métriques  
  prometheus:  
    image: prom/prometheus:latest  
    container_name: chronogaz_prometheus  
    restart: unless-stopped  
    ports:  
      - "9090:9090"  
    volumes:  
      - /home/ubuntu/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro  
      - prometheus_data:/prometheus  
    command:  
      - '--config.file=/etc/prometheus/prometheus.yml'  
      - '--storage.tsdb.path=/prometheus'  
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'  
      - '--web.console.templates=/usr/share/prometheus/consoles'  
    networks:  
      - chronogaz-network  
  
  # Grafana - Visualisation des métriques  
  grafana:  
    image: grafana/grafana:latest  
    container_name: chronogaz_grafana  
    restart: unless-stopped  
    ports:  
      - "3001:3000"  
    environment:  
      - GF_SECURITY_ADMIN_USER=admin  
      - GF_SECURITY_ADMIN_PASSWORD=chronogaz123  
      - GF_USERS_ALLOW_SIGN_UP=false  
    volumes:  
      - grafana_data:/var/lib/grafana  
    depends_on:  
      - prometheus  
    networks:  
      - chronogaz-network  
  
  # Node Exporter - Métriques du serveur  
  node-exporter:  
    image: prom/node-exporter:latest  
    container_name: chronogaz_node_exporter  
    restart: unless-stopped  
    ports:  
      - "9100:9100"  
    command:  
      - '--path.procfs=/host/proc'  
      - '--path.sysfs=/host/sys'  
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'  
    volumes:  
      - /proc:/host/proc:ro  
      - /sys:/host/sys:ro  
      - /:/rootfs:ro  
    networks:  
      - chronogaz-network  
            
volumes:            
  mongo_data:            
    driver: local  
  prometheus_data:  
    driver: local  
  grafana_data:  
    driver: local  
            
networks:            
  chronogaz-network:        
    driver: bridge
