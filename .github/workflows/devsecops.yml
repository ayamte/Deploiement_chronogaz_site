name: DevSecOps Security Analysis  
  
on:  
  push:  
    branches: [main, develop, devsecops/vulnerable-testing]  
  pull_request:  
    branches: [main]  
  workflow_dispatch:  
  
jobs:  
  security-scan:  
    runs-on: ubuntu-latest  
    name: Static Security Analysis (SAST & SCA)  
  
    steps:  
      - name: Checkout code  
        uses: actions/checkout@v4  
  
      - name: Setup Node.js  
        uses: actions/setup-node@v4  
        with:  
          node-version: '18'  
          cache: 'npm'  
          cache-dependency-path: |  
            client/package-lock.json  
            api/package-lock.json  
  
      - name: Install validation tools  
        run: |  
          sudo apt-get update  
          sudo apt-get install -y jq tree  
  
      - name: Install Dependencies - Client  
        working-directory: ./client  
        run: |  
          echo "üì¶ Installation des d√©pendances Client..."  
          npm ci --legacy-peer-deps  
        continue-on-error: false  
  
      - name: Install Dependencies - API  
        working-directory: ./api  
        run: |  
          echo "üì¶ Installation des d√©pendances API..."  
          npm ci --legacy-peer-deps  
        continue-on-error: false  
            
      # ===================================  
      # SCA - Analyse des D√©pendances  
      # ===================================  
  
      - name: SCA - NPM Audit (Client - Production)  
        working-directory: ./client  
        run: |  
          echo "üîç SCA Client Production..."  
          npm audit --json > ../sca-client-production.json || true  
          npm audit --audit-level=moderate || true  
        continue-on-error: true  
  
      - name: SCA - NPM Audit (Client - Vulnerable)  
        working-directory: ./client  
        run: |  
          echo "üîç SCA Client Vulnerable Mode..."  
          if [ -f "package.vulnerable.json" ]; then  
            cp package.json package.json.backup  
            cp package.vulnerable.json package.json  
            npm install --legacy-peer-deps  
            npm audit --json > ../sca-client-vulnerable.json || true  
            mv package.json.backup package.json  
          else  
            echo "‚ö†Ô∏è package.vulnerable.json non trouv√©, scan ignor√©"  
            echo '{"metadata":{"vulnerabilities":{"total":0}}}' > ../sca-client-vulnerable.json  
          fi  
        continue-on-error: true  
  
      - name: SCA - NPM Audit (API - Production)  
        working-directory: ./api  
        run: |  
          echo "üîç SCA API Production..."  
          npm audit --json > ../sca-api-production.json || true  
          npm audit --audit-level=moderate || true  
        continue-on-error: true  
  
      - name: SCA - NPM Audit (API - Vulnerable)  
        working-directory: ./api  
        run: |  
          echo "üîç SCA API Vulnerable Mode..."  
          if [ -f "package.vulnerable.json" ]; then  
            cp package.json package.json.backup  
            cp package.vulnerable.json package.json  
            npm install --legacy-peer-deps  
            npm audit --json > ../sca-api-vulnerable.json || true  
            mv package.json.backup package.json  
          else  
            echo "‚ö†Ô∏è package.vulnerable.json non trouv√©, scan ignor√©"  
            echo '{"metadata":{"vulnerabilities":{"total":0}}}' > ../sca-api-vulnerable.json  
          fi  
        continue-on-error: true  
  
      - name: SCA - OWASP Dependency Check  
        uses: dependency-check/Dependency-Check_Action@main  
        timeout-minutes: 30  
        with:  
          project: 'ChronoGaz'  
          path: '.'  
          format: 'JSON,HTML'  
          out: 'dependency-check-reports'  
        continue-on-error: true  
  
      - name: Upload SCA Reports  
        uses: actions/upload-artifact@v4  
        if: always()  
        with:  
          name: sca-reports  
          path: |  
            sca-client-production.json  
            sca-client-vulnerable.json  
            sca-api-production.json  
            sca-api-vulnerable.json  
            dependency-check-reports/  
          retention-days: 30  
          if-no-files-found: warn  
            
      # ===================================  
      # SAST - Analyse Statique du Code  
      # ===================================  
  
      - name: SAST - Diagnostic Structure Projet  
        run: |  
          echo "üîç DIAGNOSTIC COMPLET DE LA STRUCTURE"  
          echo "========================================"  
          echo ""  
          echo "üìç R√©pertoire actuel: $(pwd)"  
          echo ""  
              
          echo "üìÇ Structure compl√®te du projet:"  
          tree -L 3 -I 'node_modules|.git' || find . -maxdepth 3 -type d -not -path '*/node_modules/*' -not -path '*/.git/*' | head -50  
          echo ""  
              
          echo "üîç Recherche EXHAUSTIVE de fichiers JS/JSX:"  
          echo "----------------------------------------"  
              
          if [ -d "client" ]; then  
            echo "‚úì Dossier client/ existe"  
            echo ""  
            echo "  Fichiers .js dans client/:"  
            find client -type f -name "*.js" ! -path "*/node_modules/*" ! -path "*/build/*" | head -20  
            echo ""  
            echo "  Fichiers .jsx dans client/:"  
            find client -type f -name "*.jsx" ! -path "*/node_modules/*" ! -path "*/build/*" | head -20  
            echo ""  
            echo "  Total fichiers JS: $(find client -type f -name "*.js" ! -path "*/node_modules/*" ! -path "*/build/*" | wc -l)"  
            echo "  Total fichiers JSX: $(find client -type f -name "*.jsx" ! -path "*/node_modules/*" ! -path "*/build/*" | wc -l)"  
          else  
            echo "‚úó Dossier client/ INTROUVABLE"  
          fi  
              
          echo ""  
              
          if [ -d "api" ]; then  
            echo "‚úì Dossier api/ existe"  
            echo ""  
            echo "  Fichiers .js dans api/:"  
            find api -type f -name "*.js" ! -path "*/node_modules/*" | head -20  
            echo ""  
            echo "  Total fichiers JS: $(find api -type f -name "*.js" ! -path "*/node_modules/*" | wc -l)"  
          else  
            echo "‚úó Dossier api/ INTROUVABLE"  
          fi  
              
          echo ""  
          echo "========================================"  
        continue-on-error: true  
  
      - name: SAST - ESLint Security Plugin  
        run: |  
          echo "üîß Configuration SAST ESLint..."  
            
          # Installation GLOBALE  
          npm install -g eslint@8.57.0 eslint-plugin-security eslint-plugin-no-secrets  
            
          # Cr√©er config ESLint avec echo  
          echo '{' > .eslintrc.security.json  
          echo '  "env": {"browser": true, "es2021": true, "node": true},' >> .eslintrc.security.json  
          echo '  "parserOptions": {' >> .eslintrc.security.json  
          echo '    "ecmaVersion": 2021,' >> .eslintrc.security.json  
          echo '    "sourceType": "module",' >> .eslintrc.security.json  
          echo '    "ecmaFeatures": {"jsx": true}' >> .eslintrc.security.json  
          echo '  },' >> .eslintrc.security.json  
          echo '  "plugins": ["security", "no-secrets"],' >> .eslintrc.security.json  
          echo '  "extends": ["plugin:security/recommended"],' >> .eslintrc.security.json  
          echo '  "rules": {' >> .eslintrc.security.json  
          echo '    "no-secrets/no-secrets": "warn",' >> .eslintrc.security.json  
          echo '    "security/detect-eval-with-expression": "error",' >> .eslintrc.security.json  
          echo '    "security/detect-non-literal-regexp": "warn",' >> .eslintrc.security.json  
          echo '    "security/detect-unsafe-regex": "error",' >> .eslintrc.security.json  
          echo '    "security/detect-buffer-noassert": "error",' >> .eslintrc.security.json  
          echo '    "security/detect-child-process": "warn",' >> .eslintrc.security.json  
          echo '    "security/detect-disable-mustache-escape": "error",' >> .eslintrc.security.json  
          echo '    "security/detect-no-csrf-before-method-override": "error",' >> .eslintrc.security.json  
          echo '    "security/detect-non-literal-fs-filename": "warn",' >> .eslintrc.security.json  
          echo '    "security/detect-object-injection": "warn",' >> .eslintrc.security.json  
          echo '    "security/detect-possible-timing-attacks": "warn",' >> .eslintrc.security.json  
          echo '    "security/detect-pseudoRandomBytes": "error"' >> .eslintrc.security.json  
          echo '  }' >> .eslintrc.security.json  
          echo '}' >> .eslintrc.security.json  
            
          # V√©rifier cr√©ation  
          if [ ! -f ".eslintrc.security.json" ]; then  
            echo "‚ùå ERREUR: Config ESLint non cr√©√©e"  
            exit 1  
          fi  
            
          echo "‚úÖ Config cr√©√©e:"  
          cat .eslintrc.security.json  
            
          # Cr√©er fichiers vides  
          echo '[]' > sast-eslint-client.json  
          echo '[]' > sast-eslint-api.json  
            
          # Scanner Client - CORRECTION CRITIQUE  
          echo ""  
          echo "üîç Scan SAST Client..."  
          find client/src -type f \( -name "*.js" -o -name "*.jsx" \) ! -path "*/node_modules/*" > /tmp/client-files.txt  
            
          if [ -s /tmp/client-files.txt ]; then  
            echo "Fichiers trouv√©s:"  
            head -5 /tmp/client-files.txt  
              
            # ‚úÖ CORRECTION: Utiliser xargs avec -r (ignore si vide) et -d '\n' (d√©limiteur newline)  
            cat /tmp/client-files.txt | xargs -r -d '\n' eslint \  
              --config .eslintrc.security.json \  
              --format json \  
              --output-file sast-eslint-client.json 2>&1 || echo "‚ö†Ô∏è Scan termin√©"  
          else  
            echo "‚ö†Ô∏è Aucun fichier trouv√©"  
          fi  
            
          # Scanner API - CORRECTION CRITIQUE  
          echo ""  
          echo "üîç Scan SAST API..."  
          find api/src -type f -name "*.js" ! -path "*/node_modules/*" ! -path "*/coverage/*" > /tmp/api-files.txt  
            
          if [ -s /tmp/api-files.txt ]; then  
            echo "Fichiers trouv√©s:"  
            head -5 /tmp/api-files.txt  
              
            # ‚úÖ CORRECTION: Utiliser xargs avec -r et -d '\n'  
            cat /tmp/api-files.txt | xargs -r -d '\n' eslint \  
              --config .eslintrc.security.json \  
              --format json \  
              --output-file sast-eslint-api.json 2>&1 || echo "‚ö†Ô∏è Scan termin√©"  
          else  
            echo "‚ö†Ô∏è Aucun fichier trouv√©"  
          fi  
            
          # V√©rification finale  
          echo ""  
          echo "üìä R√©sultats:"  
          for file in sast-eslint-client.json sast-eslint-api.json; do  
            if [ -f "$file" ]; then  
              SIZE=$(stat -c%s "$file" 2>/dev/null || stat -f%z "$file" 2>/dev/null)  
              ISSUES=$(cat "$file" | jq '[.[].messages[]] | length' 2>/dev/null || echo "0")  
              echo "‚úÖ $file: $SIZE bytes, $ISSUES probl√®mes d√©tect√©s"  
            else  
              echo "‚ùå $file: MANQUANT"  
              echo '[]' > "$file"  
            fi  
          done  
        continue-on-error: true  
  
      - name: Verify Files Before Upload  
        if: always()  
        run: |  
          echo "üîç V√©rification finale..."  
          ls -lh sast-eslint-*.json || echo "‚ùå Aucun fichier"  
          pwd  
          find . -name "sast-eslint-*.json" -type f  
  
      - name: Upload SAST Reports  
        uses: actions/upload-artifact@v4  
        if: always()  
        with:  
          name: sast-reports  
          path: |  
            sast-eslint-client.json  
            sast-eslint-api.json  
          retention-days: 30  
          if-no-files-found: warn