name: DevSecOps Security Analysis  
  
on:  
  push:  
    branches: [main, develop, devsecops/vulnerable-testing]  
  pull_request:  
    branches: [main]  
  workflow_dispatch:  
  
jobs:  
  security-scan:  
    runs-on: ubuntu-latest  
    name: Static Security Analysis (SAST & SCA)  
  
    steps:  
      - name: Checkout code  
        uses: actions/checkout@v4  
  
      - name: Setup Node.js  
        uses: actions/setup-node@v4  
        with:  
          node-version: '18'  
          cache: 'npm'  
          cache-dependency-path: |  
            client/package-lock.json  
            api/package-lock.json  
  
      - name: Install validation tools  
        run: |  
          sudo apt-get update  
          sudo apt-get install -y jq  
  
      # ===================================  
      # Installation des Dépendances  
      # ===================================  
      - name: Install Dependencies - Client  
        working-directory: ./client  
        run: |  
          echo "📦 Installation des dépendances Client..."  
          npm ci --legacy-peer-deps  
        continue-on-error: false  
  
      - name: Install Dependencies - API  
        working-directory: ./api  
        run: |  
          echo "📦 Installation des dépendances API..."  
          npm ci --legacy-peer-deps  
        continue-on-error: false  
        
      # ===================================  
      # SCA - Analyse des Dépendances  
      # ===================================  
  
      - name: SCA - NPM Audit (Client - Production)  
        working-directory: ./client  
        run: |  
          echo "🔍 SCA Client Production..."  
          npm audit --json > ../sca-client-production.json || true  
          npm audit --audit-level=moderate || true  
        continue-on-error: true  
  
      - name: SCA - NPM Audit (Client - Vulnerable)  
        working-directory: ./client  
        run: |  
          echo "🔍 SCA Client Vulnerable Mode..."  
          cp package.json package.json.backup  
          cp package.vulnerable.json package.json  
          npm install --legacy-peer-deps  
          npm audit --json > ../sca-client-vulnerable.json || true  
          mv package.json.backup package.json  
        continue-on-error: true  
  
      - name: SCA - NPM Audit (API - Production)  
        working-directory: ./api  
        run: |  
          echo "🔍 SCA API Production..."  
          npm audit --json > ../sca-api-production.json || true  
          npm audit --audit-level=moderate || true  
        continue-on-error: true  
  
      - name: SCA - NPM Audit (API - Vulnerable)  
        working-directory: ./api  
        run: |  
          echo "🔍 SCA API Vulnerable Mode..."  
          cp package.json package.json.backup  
          cp package.vulnerable.json package.json  
          npm install --legacy-peer-deps  
          npm audit --json > ../sca-api-vulnerable.json || true  
          mv package.json.backup package.json  
        continue-on-error: true  
  
      - name: SCA - OWASP Dependency Check  
        uses: dependency-check/Dependency-Check_Action@main  
        timeout-minutes: 30  
        with:  
          project: 'ChronoGaz'  
          path: '.'  
          format: 'JSON,HTML'  
          out: 'dependency-check-reports'  
        continue-on-error: true  
  
      - name: Validate SCA Reports  
        run: |  
          echo "✅ Validation des rapports SCA..."  
          for file in sca-*.json; do  
            if [ -f "$file" ]; then  
              SIZE=$(stat -f%z "$file" 2>/dev/null || stat -c%s "$file" 2>/dev/null)  
              echo "  - $file: ${SIZE} bytes"  
            fi  
          done  
        continue-on-error: true  
  
      - name: Upload SCA Reports  
        uses: actions/upload-artifact@v4  
        if: always()  
        with:  
          name: sca-reports  
          path: |  
            sca-client-production.json  
            sca-client-vulnerable.json  
            sca-api-production.json  
            sca-api-vulnerable.json  
            dependency-check-reports/  
          retention-days: 30  
        
      # ===================================  
      # SAST - Analyse Statique du Code  
      # ===================================  
  
      - name: SAST - ESLint Security Plugin  
        run: |  
          echo "🔧 Configuration SAST ESLint..."  
            
          # Installation GLOBALE  
          npm install -g eslint@8.57.0 eslint-plugin-security eslint-plugin-no-secrets  
            
          # Configuration ESLint (gardez votre config existante)  
          cat > .eslintrc.security.json << 'EOF'  
          {  
            "env": {  
              "browser": true,  
              "es2021": true,  
              "node": true  
            },  
            "parserOptions": {  
              "ecmaVersion": 2021,  
              "sourceType": "module",  
              "ecmaFeatures": {  
                "jsx": true  
              }  
            },  
            "plugins": ["security", "no-secrets"],  
            "extends": ["plugin:security/recommended"],  
            "rules": {  
              "no-secrets/no-secrets": "warn",  
              "security/detect-eval-with-expression": "error",  
              "security/detect-non-literal-regexp": "warn",  
              "security/detect-unsafe-regex": "error",  
              "security/detect-buffer-noassert": "error",  
              "security/detect-child-process": "warn",  
              "security/detect-disable-mustache-escape": "error",  
              "security/detect-no-csrf-before-method-override": "error",  
              "security/detect-non-literal-fs-filename": "warn",  
              "security/detect-object-injection": "warn",  
              "security/detect-possible-timing-attacks": "warn",  
              "security/detect-pseudoRandomBytes": "error"  
            }  
          }  
          EOF  
            
          # Créer fichiers vides AVEC CHEMIN ABSOLU  
          touch sast-eslint-client.json  
          touch sast-eslint-api.json  
          echo '[]' > sast-eslint-client.json  
          echo '[]' > sast-eslint-api.json  
            
          # Vérifier le répertoire de travail  
          echo "📍 Répertoire actuel: $(pwd)"  
          echo "📂 Contenu du répertoire:"  
          ls -la  
            
          # Vérifier structure projet  
          echo ""  
          echo "🔍 Recherche de fichiers JS/JSX..."  
          if [ -d "client" ]; then  
            CLIENT_COUNT=$(find client -type f \( -name "*.js" -o -name "*.jsx" \) 2>/dev/null | wc -l)  
            echo "✓ Client: $CLIENT_COUNT fichiers trouvés"  
            if [ $CLIENT_COUNT -gt 0 ]; then  
              echo "  Exemples:"  
              find client -type f \( -name "*.js" -o -name "*.jsx" \) 2>/dev/null | head -5  
            fi  
          else  
            echo "✗ Dossier client/ introuvable"  
          fi  
            
          if [ -d "api" ]; then  
            API_COUNT=$(find api -type f -name "*.js" 2>/dev/null | wc -l)  
            echo "✓ API: $API_COUNT fichiers trouvés"  
            if [ $API_COUNT -gt 0 ]; then  
              echo "  Exemples:"  
              find api -type f -name "*.js" 2>/dev/null | head -5  
            fi  
          else  
            echo "✗ Dossier api/ introuvable"  
          fi  
            
          # Scanner Client avec gestion d'erreur explicite  
          if [ -d "client" ]; then  
            echo ""  
            echo "🔍 Scan SAST Client..."  
              
            # Essayer plusieurs patterns  
            eslint "client/**/*.{js,jsx}" \  
              --config .eslintrc.security.json \  
              --format json \  
              --output-file sast-eslint-client.json 2>&1 || \  
            eslint client/src \  
              --ext .js,.jsx \  
              --config .eslintrc.security.json \  
              --format json \  
              --output-file sast-eslint-client.json 2>&1 || \  
            eslint client \  
              --ext .js,.jsx \  
              --config .eslintrc.security.json \  
              --format json \  
              --output-file sast-eslint-client.json 2>&1 || \  
            echo "⚠️ Aucun fichier scanné pour client"  
          fi  
            
          # Scanner API  
          if [ -d "api" ]; then  
            echo ""  
            echo "🔍 Scan SAST API..."  
              
            eslint "api/**/*.js" \  
              --config .eslintrc.security.json \  
              --format json \  
              --output-file sast-eslint-api.json 2>&1 || \  
            eslint api/src \  
              --ext .js \  
              --config .eslintrc.security.json \  
              --format json \  
              --output-file sast-eslint-api.json 2>&1 || \  
            eslint api \  
              --ext .js \  
              --config .eslintrc.security.json \  
              --format json \  
              --output-file sast-eslint-api.json 2>&1 || \  
            echo "⚠️ Aucun fichier scanné pour api"  
          fi  
            
          # VÉRIFICATION CRITIQUE avant upload  
          echo ""  
          echo "🔍 Vérification des fichiers générés:"  
          for file in sast-eslint-client.json sast-eslint-api.json; do  
            if [ -f "$file" ]; then  
              SIZE=$(stat -c%s "$file" 2>/dev/null || stat -f%z "$file" 2>/dev/null)  
              echo "✅ $file existe ($SIZE bytes)"  
              echo "   Contenu (premières lignes):"  
              head -3 "$file"  
            else  
              echo "❌ $file MANQUANT - création forcée"  
              echo '[]' > "$file"  
            fi  
          done  
            
          # Afficher le chemin absolu des fichiers  
          echo ""  
          echo "📍 Chemins absolus des fichiers:"  
          realpath sast-eslint-client.json 2>/dev/null || echo "$(pwd)/sast-eslint-client.json"  
          realpath sast-eslint-api.json 2>/dev/null || echo "$(pwd)/sast-eslint-api.json"  
            
        continue-on-error: true  
        
      - name: Verify Files Before Upload  
        if: always()  
        run: |  
          echo "🔍 Vérification finale avant upload..."  
          ls -lh sast-eslint-*.json || echo "❌ Aucun fichier sast-eslint-*.json trouvé"  
          pwd  
          find . -name "sast-eslint-*.json" -type f  
        
      - name: Upload SAST Reports  
        uses: actions/upload-artifact@v4  
        if: always()  
        with:  
          name: sast-reports  
          path: |  
            sast-eslint-client.json  
            sast-eslint-api.json  
          retention-days: 30  
          if-no-files-found: warn  # ✅ Ajout important
      # ===================================  
      # Génération du Rapport de Synthèse  
      # ===================================  
        
      - name: Generate Security Summary  
        if: always()  
        run: |  
          echo "📋 Génération du rapport de synthèse..."  
            
          # Extraire les métriques  
          CLIENT_FILES=$(cat sast-eslint-client.json | jq 'length' 2>/dev/null || echo "0")  
          CLIENT_ISSUES=$(cat sast-eslint-client.json | jq '[.[].messages[]] | length' 2>/dev/null || echo "0")  
          API_FILES=$(cat sast-eslint-api.json | jq 'length' 2>/dev/null || echo "0")  
        