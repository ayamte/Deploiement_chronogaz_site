name: DevSecOps Security Analysis

on:
  push:
    branches: [main, develop, devsecops/vulnerable-testing]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  security-scan:
    runs-on: ubuntu-latest
    name: Static Security Analysis (SAST & SCA)

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: |
            client/package-lock.json
            api/package-lock.json

      - name: Install validation tools
        run: |
          sudo apt-get update
          sudo apt-get install -y jq tree

      - name: Debug - versions & workspace
        run: |
          echo "Node version:"
          node -v || true
          echo "npm version:"
          npm -v || true
          echo "PWD: $(pwd)"
          echo "Listing top-level files:"
          ls -la || true

      - name: Install Dependencies - Client
        working-directory: ./client
        run: |
          echo "üì¶ Installation des d√©pendances Client..."
          npm ci --legacy-peer-deps
        continue-on-error: false

      - name: Install Dependencies - API
        working-directory: ./api
        run: |
          echo "üì¶ Installation des d√©pendances API..."
          npm ci --legacy-peer-deps
        continue-on-error: false

      # ===================================
      # SCA - Analyse des D√©pendances
      # ===================================

      - name: SCA - NPM Audit (Client - Production)
        working-directory: ./client
        run: |
          echo "üîç SCA Client Production..."
          npm audit --json > ../sca-client-production.json || true
          npm audit --audit-level=moderate || true
        continue-on-error: true

      - name: SCA - NPM Audit (Client - Vulnerable)
        working-directory: ./client
        run: |
          echo "üîç SCA Client Vulnerable Mode..."
          if [ -f "package.vulnerable.json" ]; then
            cp package.json package.json.backup
            cp package.vulnerable.json package.json
            npm install --legacy-peer-deps
            npm audit --json > ../sca-client-vulnerable.json || true
            mv package.json.backup package.json
          else
            echo "‚ö†Ô∏è package.vulnerable.json non trouv√©, scan ignor√©"
            echo '{"metadata":{"vulnerabilities":{"total":0}}}' > ../sca-client-vulnerable.json
          fi
        continue-on-error: true

      - name: SCA - NPM Audit (API - Production)
        working-directory: ./api
        run: |
          echo "üîç SCA API Production..."
          npm audit --json > ../sca-api-production.json || true
          npm audit --audit-level=moderate || true
        continue-on-error: true

      - name: SCA - NPM Audit (API - Vulnerable)
        working-directory: ./api
        run: |
          echo "üîç SCA API Vulnerable Mode..."
          if [ -f "package.vulnerable.json" ]; then
            cp package.json package.json.backup
            cp package.vulnerable.json package.json
            npm install --legacy-peer-deps
            npm audit --json > ../sca-api-vulnerable.json || true
            mv package.json.backup package.json
          else
            echo "‚ö†Ô∏è package.vulnerable.json non trouv√©, scan ignor√©"
            echo '{"metadata":{"vulnerabilities":{"total":0}}}' > ../sca-api-vulnerable.json
          fi
        continue-on-error: true

      - name: SCA - OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        timeout-minutes: 30
        with:
          project: 'ChronoGaz'
          path: '.'
          format: 'JSON,HTML'
          out: 'dependency-check-reports'
        continue-on-error: true

      - name: Upload SCA Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: sca-reports
          path: |
            sca-client-production.json
            sca-client-vulnerable.json
            sca-api-production.json
            sca-api-vulnerable.json
            dependency-check-reports/
          retention-days: 30
          if-no-files-found: warn

      # ===================================
      # SAST - Analyse Statique du Code
      # ===================================

      - name: SAST - Diagnostic Structure Projet
        run: |
          echo "üîç DIAGNOSTIC COMPLET DE LA STRUCTURE"
          echo "========================================"
          echo ""
          echo "üìç R√©pertoire actuel: $(pwd)"
          echo ""
          echo "üìÇ Structure compl√®te du projet:"
          tree -L 3 -I 'node_modules|.git' || find . -maxdepth 3 -type d -not -path '*/node_modules/*' -not -Path '*/.git/*' | head -50
          echo ""
          echo "üîç Recherche EXHAUSTIVE de fichiers JS/JSX:"
          echo "----------------------------------------"

          if [ -d "client" ]; then
            echo "‚úì Dossier client/ existe"
            echo ""
            echo "  Fichiers .js dans client/:"
            find client -type f -name "*.js" ! -path "*/node_modules/*" ! -path "*/build/*" | head -20
            echo ""
            echo "  Fichiers .jsx dans client/:"
            find client -type f -name "*.jsx" ! -path "*/node_modules/*" ! -path "*/build/*" | head -20
            echo ""
            echo "  Total fichiers JS: $(find client -type f -name "*.js" ! -path "*/node_modules/*" ! -path "*/build/*" | wc -l)"
            echo "  Total fichiers JSX: $(find client -type f -name "*.jsx" ! -path "*/node_modules/*" ! -path "*/build/*" | wc -l)"
          else
            echo "‚úó Dossier client/ INTROUVABLE"
          fi

          echo ""

          if [ -d "api" ]; then
            echo "‚úì Dossier api/ existe"
            echo ""
            echo "  Fichiers .js dans api/:"
            find api -type f -name "*.js" ! -path "*/node_modules/*" | head -20
            echo ""
            echo "  Total fichiers JS: $(find api -type f -name "*.js" ! -path "*/node_modules/*" | wc -l)"
          else
            echo "‚úó Dossier api/ INTROUVABLE"
          fi

          echo ""
          echo "========================================"
        continue-on-error: true

      - name: SAST - ESLint Security Plugin (robuste)
        run: |
          # Ne pas faire √©chouer le step GH si on veut collecter les rapports proprement
          set -euo pipefail

          echo "üîß Installation locale ESLint & plugins (temporaire)"
          # Installer eslint et plugins localement pour garantir que les plugins existent
          npm install --no-audit --no-fund eslint@8.57.0 eslint-plugin-security eslint-plugin-no-secrets || true

          echo "üß≠ Debug: versions"
          node -v || true
          npm -v || true
          npx eslint -v || true

          # Cr√©er la config ESLint si elle n'existe pas (tu peux remplacer si tu as une config sp√©cifique)
          if [ ! -f ".eslintrc.security.json" ]; then
            echo "Cr√©ation de .eslintrc.security.json par d√©faut..."
            cat > .eslintrc.security.json <<'EOF'
{
  "env": {"browser": true, "es2021": true, "node": true},
  "parserOptions": {
    "ecmaVersion": 2021,
    "sourceType": "module",
    "ecmaFeatures": {"jsx": true}
  },
  "plugins": ["security", "no-secrets"],
  "extends": ["plugin:security/recommended"],
  "rules": {
    "no-secrets/no-secrets": "warn",
    "security/detect-eval-with-expression": "error",
    "security/detect-non-literal-regexp": "warn",
    "security/detect-unsafe-regex": "error",
    "security/detect-buffer-noassert": "error",
    "security/detect-child-process": "warn",
    "security/detect-disable-mustache-escape": "error",
    "security/detect-no-csrf-before-method-override": "error",
    "security/detect-non-literal-fs-filename": "warn",
    "security/detect-object-injection": "warn",
    "security/detect-possible-timing-attacks": "warn",
    "security/detect-pseudoRandomBytes": "error"
  }
}
EOF
          fi

          # Fichiers de sortie / erreur
          CLIENT_OUT=sast-eslint-client.json
          CLIENT_ERR=eslint-client.err
          API_OUT=sast-eslint-api.json
          API_ERR=eslint-api.err

          # Initialise fichiers
          echo '[]' > "$CLIENT_OUT"
          echo '[]' > "$API_OUT"
          : > "$CLIENT_ERR"
          : > "$API_ERR"

          # Helper function: run eslint only if files exist
          run_eslint_if_files() {
            base=$1
            pattern=$2
            out=$3
            err=$4

            # trouver fichiers JS/JSX
            files=$(find "$base" -type f \( -name "*.js" -o -name "*.jsx" \) -not -path "*/node_modules/*" -not -path "*/build/*" | head -1000)
            if [ -z "$files" ]; then
              echo "‚ö†Ô∏è Aucun fichier JS/JSX trouv√© dans $base (pattern: $pattern). Fichier $out laiss√© vide."
              return 0
            fi

            echo "üîç Lancement ESLint sur $base (fichiers: $(echo "$files" | wc -l))"
            # Ex√©cuter eslint via npx, capturer stderr
            # Note: on passe le pattern pour la compatibilit√©, mais eslint va matcher les fichiers trouv√©s
            npx eslint $pattern --config .eslintrc.security.json --format json --output-file "$out" 2> "$err" || true

            # Si sortie non-JSON -> afficher erreur et r√©initialiser en []
            if ! jq -e . "$out" >/dev/null 2>&1; then
              echo "‚ö†Ô∏è $out n'est pas un JSON valide. Affichage de STDERR et cr√©ation d'un [] vide."
              echo "---- $err ----"
              sed -n '1,200p' "$err" || true
              echo '[]' > "$out"
            fi
          }

          # Lancer scan client
          if [ -d "client/src" ]; then
            run_eslint_if_files client 'client/src/**/*.{js,jsx}' "$CLIENT_OUT" "$CLIENT_ERR"
          else
            echo "‚ö†Ô∏è client/src introuvable"
          fi

          # Lancer scan api
          if [ -d "api/src" ]; then
            run_eslint_if_files api 'api/src/**/*.js' "$API_OUT" "$API_ERR"
          else
            echo "‚ö†Ô∏è api/src introuvable"
          fi

          # Afficher STDERR si pr√©sents (utile pour debugging dans les logs GH Actions)
          if [ -s "$CLIENT_ERR" ]; then
            echo "---- ESLINT CLIENT STDERR (preview) ----"
            sed -n '1,200p' "$CLIENT_ERR"
          fi
          if [ -s "$API_ERR" ]; then
            echo "---- ESLINT API STDERR (preview) ----"
            sed -n '1,200p' "$API_ERR"
          fi

          # R√©sum√© tailles
          echo "‚úÖ Final: $CLIENT_OUT $(stat -c%s "$CLIENT_OUT" 2>/dev/null || stat -f%z "$CLIENT_OUT") bytes"
          echo "‚úÖ Final: $API_OUT $(stat -c%s "$API_OUT" 2>/dev/null || stat -f%z "$API_OUT") bytes"
        continue-on-error: true

      - name: Verify Files Before Upload
        if: always()
        run: |
          echo "üîç V√©rification finale..."
          ls -lh sast-eslint-*.json || echo "‚ùå Aucun fichier"
          pwd
          find . -name "sast-eslint-*.json" -type f || true

      - name: Upload SAST Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: sast-reports
          path: |
            sast-eslint-client.json
            sast-eslint-api.json
          retention-days: 30
          if-no-files-found: warn
