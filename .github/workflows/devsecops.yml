name: DevSecOps Security Analysis

on:
  push:
    branches: [main, develop, devsecops/vulnerable-testing]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  security-scan:
    runs-on: ubuntu-latest
    name: Static Security Analysis (SAST & SCA)

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: |
            client/package-lock.json
            api/package-lock.json

      - name: Install validation tools
        run: |
          sudo apt-get update
          sudo apt-get install -y jq tree

      - name: Install Dependencies - Client
        working-directory: ./client
        run: npm ci --legacy-peer-deps
        continue-on-error: false

      - name: Install Dependencies - API
        working-directory: ./api
        run: npm ci --legacy-peer-deps
        continue-on-error: false

      # ===================================
      # SCA - Analyse des D√©pendances
      # ===================================

      - name: SCA - NPM Audit (Client - Production)
        working-directory: ./client
        run: |
          npm audit --json > ../sca-client-production.json || true
          npm audit --audit-level=moderate || true
        continue-on-error: true

      - name: SCA - NPM Audit (Client - Vulnerable)
        working-directory: ./client
        run: |
          if [ -f "package.vulnerable.json" ]; then
            cp package.json package.json.backup
            cp package.vulnerable.json package.json
            npm install --legacy-peer-deps
            npm audit --json > ../sca-client-vulnerable.json || true
            mv package.json.backup package.json
          else
            echo '{"metadata":{"vulnerabilities":{"total":0}}}' > ../sca-client-vulnerable.json
          fi
        continue-on-error: true

      - name: SCA - NPM Audit (API - Production)
        working-directory: ./api
        run: |
          npm audit --json > ../sca-api-production.json || true
          npm audit --audit-level=moderate || true
        continue-on-error: true

      - name: SCA - NPM Audit (API - Vulnerable)
        working-directory: ./api
        run: |
          if [ -f "package.vulnerable.json" ]; then
            cp package.json package.json.backup
            cp package.vulnerable.json package.json
            npm install --legacy-peer-deps
            npm audit --json > ../sca-api-vulnerable.json || true
            mv package.json.backup package.json
          else
            echo '{"metadata":{"vulnerabilities":{"total":0}}}' > ../sca-api-vulnerable.json
          fi
        continue-on-error: true

      - name: SCA - OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        timeout-minutes: 30
        with:
          project: 'ChronoGaz'
          path: '.'
          format: 'JSON,HTML'
          out: 'dependency-check-reports'
        continue-on-error: true

      - name: Upload SCA Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: sca-reports
          path: |
            sca-client-production.json
            sca-client-vulnerable.json
            sca-api-production.json
            sca-api-vulnerable.json
            dependency-check-reports/
          retention-days: 30
          if-no-files-found: warn

      # ===================================
      # SAST - Analyse Statique du Code
      # ===================================

      - name: SAST - ESLint Security Plugin
        run: |
          set -euo pipefail
          
          TEMP_INSTALL_DIR="/tmp/eslint-tools"
          mkdir -p "$TEMP_INSTALL_DIR"
          cd "$TEMP_INSTALL_DIR"
          
          echo "üîß Installation ESLint & plugins..."
          npm init -y > /dev/null 2>&1
          npm install eslint@8.57.0 eslint-plugin-security eslint-plugin-no-secrets --force > /dev/null 2>&1
          
          export PATH="$TEMP_INSTALL_DIR/node_modules/.bin:$PATH"
          export NODE_PATH="$TEMP_INSTALL_DIR/node_modules${NODE_PATH:+:$NODE_PATH}"
          
          cd $GITHUB_WORKSPACE
          
          # Cr√©er config ESLint avec nom unique
          printf '{"env":{"browser":true,"es2021":true,"node":true},"parserOptions":{"ecmaVersion":2021,"sourceType":"module","ecmaFeatures":{"jsx":true}},"plugins":["security","no-secrets"],"rules":{"no-secrets/no-secrets":"warn","security/detect-eval-with-expression":"error","security/detect-non-literal-require":"warn","security/detect-non-literal-regexp":"warn","security/detect-non-literal-fs-filename":"warn","security/detect-unsafe-regex":"error","security/detect-buffer-noassert":"warn","security/detect-child-process":"warn","security/detect-disable-mustache-escape":"warn","security/detect-no-csrf-before-method-override":"warn","security/detect-possible-timing-attacks":"warn","security/detect-pseudoRandomBytes":"warn","security/detect-object-injection":"warn"}}' > .eslintrc.security.json
          
          echo "üìÑ Config de s√©curit√© g√©n√©r√©e"
          
          echo '[]' > sast-eslint-client.json
          echo '[]' > sast-eslint-api.json
          
          # Scan client avec --no-eslintrc pour ignorer les configs existantes
          echo "üîç Scan client/src..."
          if [ -d "client/src" ]; then
            find client/src -type f \( -name "*.js" -o -name "*.jsx" \) > /tmp/client-files.txt
            if [ -s /tmp/client-files.txt ]; then
              xargs -a /tmp/client-files.txt eslint \
                --no-eslintrc \
                --config .eslintrc.security.json \
                --resolve-plugins-relative-to "$TEMP_INSTALL_DIR" \
                --format json \
                -o sast-eslint-client.json 2>&1 || true
            fi
          fi
          
          # Scan api avec --no-eslintrc
          echo "üîç Scan api/src..."
          if [ -d "api/src" ]; then
            find api/src -type f -name "*.js" > /tmp/api-files.txt
            if [ -s /tmp/api-files.txt ]; then
              xargs -a /tmp/api-files.txt eslint \
                --no-eslintrc \
                --config .eslintrc.security.json \
                --resolve-plugins-relative-to "$TEMP_INSTALL_DIR" \
                --format json \
                -o sast-eslint-api.json 2>&1 || true
            fi
          fi
          
          # Valider JSON et afficher r√©sum√©
          for f in sast-eslint-client.json sast-eslint-api.json; do
            if ! jq empty "$f" 2>/dev/null; then
              echo "‚ö†Ô∏è  JSON invalide pour $f, r√©initialisation"
              echo '[]' > "$f"
            else
              ISSUES=$(jq 'length' "$f")
              echo "‚úì $f : $ISSUES fichiers analys√©s"
            fi
          done
          
          echo ""
          echo "‚úÖ Rapports SAST g√©n√©r√©s:"
          ls -lh sast-eslint-*.json
          
          # Afficher un r√©sum√© des probl√®mes trouv√©s
          echo ""
          echo "üìä R√©sum√© des vuln√©rabilit√©s d√©tect√©es:"
          for f in sast-eslint-client.json sast-eslint-api.json; do
            if [ -f "$f" ]; then
              TOTAL_ISSUES=$(jq '[.[] | .messages | length] | add // 0' "$f")
              ERROR_COUNT=$(jq '[.[] | .messages[] | select(.severity == 2)] | length' "$f")
              WARN_COUNT=$(jq '[.[] | .messages[] | select(.severity == 1)] | length' "$f")
              echo "  $f: $TOTAL_ISSUES issues ($ERROR_COUNT errors, $WARN_COUNT warnings)"
            fi
          done
        continue-on-error: true

      - name: Upload SAST Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: sast-reports
          path: |
            sast-eslint-client.json
            sast-eslint-api.json
          retention-days: 30
          if-no-files-found: warn

 # ====================================================================  
  # Job DAST - Dynamic Application Security Testing  
  # ====================================================================  
    
  dast-scan:  
    runs-on: ubuntu-latest  
    name: Dynamic Security Analysis (DAST)  
    needs: security-scan  
    timeout-minutes: 20  
      
    steps:  
      - name: Checkout code  
        uses: actions/checkout@v4  
        
      - name: Verify Target Accessibility  
        run: |  
          echo "Testing target: ${{ secrets.ZAP_TARGET_URL }}"  
          if curl -f -s -o /dev/null "${{ secrets.ZAP_TARGET_URL }}/api/health"; then  
            echo "‚úÖ Target is accessible"  
          else  
            echo "‚ö†Ô∏è Warning: Target may not be accessible"  
          fi  
        continue-on-error: true  
        
      - name: DAST - OWASP ZAP Baseline Scan  
        uses: zaproxy/action-baseline@v0.10.0  
        with:  
          target: ${{ secrets.ZAP_TARGET_URL }}  
          rules_file_name: '.zap/rules.tsv'  
          cmd_options: '-a'  
        continue-on-error: true  
        
      - name: Upload DAST Reports  
        uses: actions/upload-artifact@v4  
        if: always()  
        with:  
          name: dast-reports  
          path: |  
            report_html.html  
            report_json.json  
            report_md.md  
          retention-days: 30  
          if-no-files-found: warn