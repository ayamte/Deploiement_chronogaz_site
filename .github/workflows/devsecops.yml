name: DevSecOps Security Analysis

on:
  push:
    branches: [main, develop, devsecops/vulnerable-testing]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  security-scan:
    runs-on: ubuntu-latest
    name: Static Security Analysis (SAST & SCA)

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: |
            client/package-lock.json
            api/package-lock.json

      - name: Install validation tools
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Install Dependencies - Client
        working-directory: ./client
        run: npm ci

      - name: Install Dependencies - API
        working-directory: ./api
        run: npm ci
      
      # ===================================
      # SCA - Analyse des Dépendances
      # ===================================

      - name: SCA - NPM Audit (Client - Production)
        working-directory: ./client
        run: |
          npm audit --json > ../sca-client-production.json || true
          npm audit --audit-level=moderate || true
        continue-on-error: true

      - name: SCA - NPM Audit (Client - Vulnerable)
        working-directory: ./client
        run: |
          cp package.json package.json.backup
          cp package.vulnerable.json package.json

          npm install --legacy-peer-deps
          npm audit --json > ../sca-client-vulnerable.json || true

          mv package.json.backup package.json
        continue-on-error: true

      - name: SCA - NPM Audit (API - Production)
        working-directory: ./api
        run: |
          npm audit --json > ../sca-api-production.json || true
          npm audit --audit-level=moderate || true
        continue-on-error: true

      - name: SCA - NPM Audit (API - Vulnerable)
        working-directory: ./api
        run: |
          cp package.json package.json.backup
          cp package.vulnerable.json package.json

          npm install --legacy-peer-deps
          npm audit --json > ../sca-api-vulnerable.json || true

          mv package.json.backup package.json
        continue-on-error: true

      - name: SCA - OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        timeout-minutes: 30
        with:
          project: 'ChronoGaz'
          path: '.'
          format: 'JSON,HTML'
          out: 'dependency-check-reports'
        continue-on-error: true

      - name: Upload SCA Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: sca-reports
          path: |
            sca-client-production.json
            sca-client-vulnerable.json
            sca-api-production.json
            sca-api-vulnerable.json
            dependency-check-reports/
          retention-days: 30
      
      # ===================================
      # SAST - Analyse Statique du Code
      # ===================================

      - name: SAST - ESLint Security Plugin
        run: |
          # Installation LOCALE (pas globale!) dans le répertoire courant
          npm init -y
          npm install eslint@8.57.0 eslint-plugin-security eslint-plugin-no-secrets

          # Configuration ESLint
          cat > .eslintrc.security.json << 'EOF'
          {
            "env": {
              "browser": true,
              "es2021": true,
              "node": true
            },
            "parserOptions": {
              "ecmaVersion": 2021,
              "sourceType": "module",
              "ecmaFeatures": {
                "jsx": true
              }
            },
            "plugins": ["security", "no-secrets"],
            "extends": ["plugin:security/recommended"],
            "rules": {
              "no-secrets/no-secrets": "warn",
              "security/detect-eval-with-expression": "error",
              "security/detect-non-literal-regexp": "warn",
              "security/detect-unsafe-regex": "error",
              "security/detect-buffer-noassert": "error",
              "security/detect-child-process": "warn",
              "security/detect-disable-mustache-escape": "error",
              "security/detect-no-csrf-before-method-override": "error",
              "security/detect-non-literal-fs-filename": "warn",
              "security/detect-object-injection": "warn",
              "security/detect-possible-timing-attacks": "warn",
              "security/detect-pseudoRandomBytes": "error"
            }
          }
          EOF

          # Créer les fichiers vides pour garantir leur existence
          echo '[]' > sast-eslint-client.json
          echo '[]' > sast-eslint-api.json

          # Debug: Vérifier la structure
          echo "=== Vérification structure ==="
          ls -la client/ 2>/dev/null | head -10 || echo "Pas de dossier client/"
          ls -la api/ 2>/dev/null | head -10 || echo "Pas de dossier api/"
          echo "=== Fichiers JS dans client ==="
          find client -name "*.js" -o -name "*.jsx" 2>/dev/null | head -10 || echo "Aucun fichier trouvé"
          echo "=== Fichiers JS dans api ==="
          find api -name "*.js" 2>/dev/null | head -10 || echo "Aucun fichier trouvé"

          # Scanner Client avec npx (utilise les dépendances locales)
          if [ -d "client" ]; then
            echo "=== Scanning Client ==="
            npx eslint "client/**/*.js" "client/**/*.jsx" --config .eslintrc.security.json \
              --format json --output-file sast-eslint-client.json 2>&1 || echo "✅ Client scan terminé"
            
            # Si toujours vide, essayer avec --ext
            if [ "$(cat sast-eslint-client.json)" = "[]" ]; then
              echo "=== Retry avec --ext ==="
              npx eslint client --ext .js,.jsx,.ts,.tsx --config .eslintrc.security.json \
                --format json --output-file sast-eslint-client.json 2>&1 || echo "✅ Client scan retry terminé"
            fi
          fi

          # Scanner API
          if [ -d "api" ]; then
            echo "=== Scanning API ==="
            npx eslint "api/**/*.js" --config .eslintrc.security.json \
              --format json --output-file sast-eslint-api.json 2>&1 || echo "✅ API scan terminé"
            
            if [ "$(cat sast-eslint-api.json)" = "[]" ]; then
              echo "=== Retry avec --ext ==="
              npx eslint api --ext .js --config .eslintrc.security.json \
                --format json --output-file sast-eslint-api.json 2>&1 || echo "✅ API scan retry terminé"
            fi
          fi

          # Vérification et stats
          echo "=== Fichiers créés ==="
          ls -lh sast-eslint-*.json
          
          echo "=== Contenu Client (premiers résultats) ==="
          cat sast-eslint-client.json | head -100
          
          echo "=== Contenu API (premiers résultats) ==="
          cat sast-eslint-api.json | head -100
          
          # Compter les issues
          CLIENT_COUNT=$(cat sast-eslint-client.json | jq 'length' 2>/dev/null || echo "0")
          API_COUNT=$(cat sast-eslint-api.json | jq 'length' 2>/dev/null || echo "0")
          echo " Client: $CLIENT_COUNT fichiers analysés"
          echo " API: $API_COUNT fichiers analysés"
        continue-on-error: true

      - name: Upload SAST Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: sast-reports
          path: |
            sast-eslint-client.json
            sast-eslint-api.json
          retention-days: 30