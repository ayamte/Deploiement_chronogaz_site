import React, { useState, useEffect, useRef } from 'react';
import {
  MdLocationOn as MapPin,
  MdNavigation as Navigation,
  MdInventory as Package,
  MdAccessTime as Clock,
  MdCheckCircle as CheckCircle,
  MdRoute as Route,
  MdWarning as AlertTriangle,
  MdKeyboardArrowUp as ArrowUp,
  MdKeyboardArrowDown as ArrowDown,
  MdRemove as Minus,
  MdGpsFixed as Target,
  MdRefresh as Loader2,
  MdClose as X,
  MdVisibility as Eye,
  MdPhone as Phone,
  MdEmail as Email,
  MdAdd as Plus
} from 'react-icons/md';
import './NextOrderMap.css';
import livraisonService from '../../../services/livraisonService';
import { authService } from '../../../services/authService';
import planificationService from '../../../services/planificationService';
import { useWebSocket } from '../../../hooks/useWebSocket';
import RealDeliveryMap from './RealDeliveryMap';

export default function NextOrderMapPage() {
  const [livraisons, setLivraisons] = useState([]);
  const [selectedOrder, setSelectedOrder] = useState(null);
  const [isDetailsModalOpen, setIsDetailsModalOpen] = useState(false);
  const [isStatusModalOpen, setIsStatusModalOpen] = useState(false);
  const [statusAction, setStatusAction] = useState('');
  const [statusNote, setStatusNote] = useState('');
  const [loading, setLoading] = useState(false);
  const [notification, setNotification] = useState(null);
  const [currentUser, setCurrentUser] = useState(null);
  const [driverLocation, setDriverLocation] = useState(null);
  
  // ‚úÖ Nouveaux √©tats et ref pour g√©rer le suivi GPS
  const [isTracking, setIsTracking] = useState(false);
  const watchIdRef = useRef(null);

  const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';

  const { subscribe, isConnected, updatePosition } = useWebSocket(true);

  // ‚úÖ Nouvelle fonction : d√©marre la surveillance GPS
  const handleStartTracking = () => {
    console.log('üéØ BOUTON SUIVI CLIQU√â !');
    if (!navigator.geolocation) {
      setNotification({ type: 'warning', message: 'G√©olocalisation non support√©e par le navigateur' });
      return;
    }

    if (isTracking) {
      console.log('‚ÑπÔ∏è Le suivi est d√©j√† actif.');
      return;
    }

    setNotification({ type: 'info', message: 'D√©marrage du suivi GPS...' });
    setIsTracking(true);

    const watchId = navigator.geolocation.watchPosition(
      (position) => {
        const newPosition = {
          latitude: position.coords.latitude,
          longitude: position.coords.longitude
        };
        setDriverLocation(newPosition);
        console.log('üìç Position du chauffeur mise √† jour:', newPosition);
        
        // ‚úÖ PRIORIT√â ABSOLUE √† l'ID de livraison pour le suivi en temps r√©el
        if (isConnected && selectedOrder) {
          // Utiliser UNIQUEMENT l'ID de livraison si disponible, sinon planification
          const trackingId = selectedOrder.livraisonId || selectedOrder.planificationId;
          const trackingType = selectedOrder.livraisonId ? 'LIVRAISON' : 'PLANIFICATION';

          if (trackingId) {
            console.log(`üì§ Envoi de la position pour l'ID: ${trackingId} (type: ${trackingType})`);
            updatePosition(trackingId, newPosition.latitude, newPosition.longitude);
          } else {
            console.log('‚ùå Aucun ID de tracking disponible:', selectedOrder);
          }
        } else {
          console.log('‚ùå Pas d\'envoi de position:', {
            isConnected,
            selectedOrder: !!selectedOrder,
            livraisonId: selectedOrder?.livraisonId,
            planificationId: selectedOrder?.planificationId
          });
        }
      },
      (error) => {
        console.error('‚ùå Erreur de suivi GPS:', error);
        setNotification({ type: 'error', message: `Erreur GPS: ${error.message}` });
        setIsTracking(false);
        if (watchIdRef.current) {
          navigator.geolocation.clearWatch(watchIdRef.current);
        }
      },
      { 
        enableHighAccuracy: true, 
        timeout: 20000, 
        maximumAge: 0 
      }
    );

    watchIdRef.current = watchId;
  };

  // ‚úÖ Nouvelle fonction : arr√™te la surveillance GPS
  const handleStopTracking = () => {
    if (watchIdRef.current) {
      navigator.geolocation.clearWatch(watchIdRef.current);
      console.log('üö´ Suivi GPS arr√™t√©.');
      setIsTracking(false);
      setNotification({ type: 'info', message: "Suivi GPS arr√™t√©." });
    }
  };

  // ‚úÖ useEffect pour le nettoyage lors du d√©montage du composant
  useEffect(() => {
    return () => {
      if (watchIdRef.current) {
        navigator.geolocation.clearWatch(watchIdRef.current);
      }
    };
  }, []);

  // Le reste du code...
  useEffect(() => {
    console.log('üîå [NextOrderMap] √âtat connexion WebSocket:', isConnected);
    console.log('üë§ [NextOrderMap] Current user employee_id:', currentUser?.employee_id);
      
    if (currentUser?.employee_id && isConnected) {
      console.log('‚úÖ [NextOrderMap] Abonnement aux √©v√©nements WebSocket...');
        
      const unsubscribe = subscribe('new_assignment', (data) => {
        console.log('üìã [NextOrderMap] Nouvelle assignation re√ßue:', data);
        console.log('üîç [NextOrderMap] Comparaison IDs:', {
          received: data.employeeId,
          current: currentUser.employee_id,
          match: data.employeeId === currentUser.employee_id
        });
          
        if (data.employeeId === currentUser.employee_id) {
          console.log('‚úÖ [NextOrderMap] Assignation pour cet employ√© - rechargement...');
          refreshDeliveryData();
          setNotification({
            type: "info",
            message: `Nouvelle commande assign√©e: ${data.orderNumber}`
          });
        } else {
          console.log('‚ùå [NextOrderMap] Assignation pour un autre employ√©');
        }
      });
          
      return unsubscribe;
    } else {
      console.log('‚ùå [NextOrderMap] Conditions non remplies:', {
        hasEmployeeId: !!currentUser?.employee_id,
        isConnected
      });
    }
  }, [currentUser, isConnected, subscribe]);

  useEffect(() => {
    if (isConnected) {
      const testSubscribe = subscribe('test', (data) => {
        console.log('üß™ [NextOrderMap] √âv√©nement test re√ßu:', data);
      });
          
      return () => testSubscribe();
    }
  }, [isConnected, subscribe]);

  useEffect(() => {
    const fetchCurrentUser = async () => {
      try {
        console.log('üîç D√âBUT - R√©cup√©ration utilisateur connect√©');
        const token = authService.getToken();
        
        if (!token) {
          console.error('‚ùå ERREUR: Aucun token trouv√©');
          setNotification({
            type: "error",
            message: "Session expir√©e - veuillez vous reconnecter"
          });
          return;
        }
        
        const response = await fetch(`${API_BASE_URL}/api/users/profile`, {
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        });
        
        if (!response.ok) {
          console.error('‚ùå ERREUR API:', response.status, response.statusText);
          setNotification({
            type: "error",
            message: `Erreur API: ${response.status} - ${response.statusText}`
          });
          return;
        }
        
        const data = await response.json();
        
        if (!data.success || !data.data) {
          console.error('‚ùå ERREUR: Donn√©es utilisateur manquantes');
          setNotification({
            type: "error",
            message: "Erreur lors de la r√©cup√©ration du profil"
          });
          return;
        }
        
        const userData = {
          ...data.data,
          employee_id: data.data.employee_info?._id || data.data.employee_info?.matricule
        };
        
        if (!userData.employee_id) {
          console.error('‚ùå ERREUR: employee_id manquant dans userData');
          setNotification({
            type: "error",
            message: "ID employ√© manquant - contactez l'administrateur"
          });
          return;
        }
        
        console.log('‚úÖ Employee ID trouv√©:', userData.employee_id);
        setCurrentUser(userData);
        
      } catch (error) {
        console.error('üí• EXCEPTION lors de la r√©cup√©ration utilisateur:', error);
        setNotification({
          type: "error",
          message: `Erreur technique: ${error.message}`
        });
      }
    };
    fetchCurrentUser();
  }, []);

  useEffect(() => {
    console.log('üîå [NextOrderMap] √âtat connexion:', isConnected);
    console.log('üìä [NextOrderMap] Nombre de livraisons:', livraisons.length);
  }, [isConnected, livraisons.length]);

  const refreshDeliveryData = async () => {
    console.log('üîÑ [NextOrderMap] D√©but refreshDeliveryData');
    console.log('üë§ [NextOrderMap] Employee ID:', currentUser?.employee_id);
      
    if (!currentUser?.employee_id) {
      console.log('‚è≥ [NextOrderMap] ATTENTE: employee_id non disponible');
      return;
    }
      
    try {
      console.log('üì° [NextOrderMap] Appel API getPlanificationsByEmployee...');
      const planificationsResponse = await planificationService.getPlanificationsByEmployee(currentUser.employee_id);
          
      console.log('üìã [NextOrderMap] Planifications re√ßues:', planificationsResponse.data?.length || 0);
      
      const filteredPlanifications = planificationsResponse.data?.filter(planification => {    
        const commandeStatut = planification.commande_id?.statut;    
        const planificationEtat = planification.etat;    
            
        // √âtats qui doivent faire dispara√Ætre la commande    
        const etatsCommandeTermines = ['LIVREE', 'ANNULEE', 'ECHOUEE'];    
        const etatsPlanificationTermines = ['ANNULE'];    
            
        const isCommandeTerminee = etatsCommandeTermines.includes(commandeStatut);    
        const isPlanificationTerminee = etatsPlanificationTermines.includes(planificationEtat);    
        
        // ‚úÖ Filtre par date du jour actuel  
        const deliveryDate = new Date(planification.delivery_date || planification.date);    
        const today = new Date();    
        const isToday = deliveryDate.toDateString() === today.toDateString();    
            
        // ‚úÖ CORRECTION: Inclure isToday dans la condition  
        return !isCommandeTerminee && !isPlanificationTerminee && isToday;    
      }) || [];

      console.log('‚úÖ R√©sultat final:');
      console.log(`  - Planifications gard√©es: ${filteredPlanifications.length}`);
        
      setLivraisons(filteredPlanifications);
      
      // ‚úÖ Correction : D√©finir automatiquement la prochaine commande pour le suivi
      if (filteredPlanifications.length > 0) {
        const nextOrderCandidate = transformLivraisonToOrder(filteredPlanifications[0]);
        if (nextOrderCandidate) {
          setSelectedOrder(nextOrderCandidate);
          console.log('‚úÖ Prochaine commande d√©finie automatiquement :', nextOrderCandidate.orderNumber);
        }
      } else {
        setSelectedOrder(null);
      }
          
    } catch (error) {
      console.error('üí• [NextOrderMap] Erreur lors du rechargement:', error);
      setNotification({
        type: "error",
        message: `Erreur chargement: ${error.message}`
      });
    }
  };

  useEffect(() => {
    const fetchDeliveryData = async () => {
      if (!currentUser?.employee_id) {
        return;
      }

      try {
        setLoading(true);
        await refreshDeliveryData();
        
        if (livraisons.length === 0) {
          setNotification({
            type: "info",
            message: "Aucune livraison assign√©e pour le moment"
          });
        }
        
      } catch (error) {
        console.error('üí• EXCEPTION lors de la r√©cup√©ration des donn√©es:', error);
        setNotification({
          type: "error",
          message: `Erreur chargement: ${error.message}`
        });
      } finally {
        setLoading(false);
      }
    };

    fetchDeliveryData();
  }, [currentUser]);

  const transformLivraisonToOrder = (item) => {
    if (!item) return null;
    
    const itemId = item.id || item._id;
    if (!itemId) return null;
    
    const isPlanification = item.etat === 'PLANIFIE';
    const isLivraison = ['EN_COURS', 'LIVRE', 'ECHEC', 'ANNULE'].includes(item.etat);
    
    const commandeData = item.commande_id;
    const customerData = item.commande_id?.customer_id;
    const addressData = item.commande_id?.address_id;
    
    if (!commandeData) return null;
    
    return {
      id: itemId,
      orderNumber: commandeData?.numero_commande || 'N/A',
      planificationId: isPlanification ? itemId : (item.planification_id?._id || item.planification_id || itemId),
      customer: {
        id: customerData?._id || '',
        name: customerData?.physical_user_id
          ? `${customerData.physical_user_id.first_name} ${customerData.physical_user_id.last_name}`
          : customerData?.moral_user_id?.raison_sociale || 'Client inconnu',
        phone: customerData?.physical_user_id?.telephone_principal ||
               customerData?.moral_user_id?.telephone_principal || '',
        email: '',
      },
      deliveryAddress: {
        street: addressData?.street || '',
        city: addressData?.city_id?.name || '',
        postalCode: addressData?.postal_code || '',
        latitude: addressData?.latitude || 0,
        longitude: addressData?.longitude || 0,
      },
      orderDate: commandeData?.date_commande || new Date().toISOString(),
      requestedDeliveryDate: item.delivery_date || item.date || new Date().toISOString(),
      status: mapLivraisonStatus(item.etat),
      priority: item.priority || 'medium',
      products: commandeData?.lignes || [],
      totalAmount: commandeData?.montant_total || item.total || 0,
      customerNotes: commandeData?.details || item.details || '',
      estimatedDeliveryTime: new Date(item.delivery_date || item.date || new Date()).toLocaleTimeString('fr-FR', {
        hour: '2-digit',
        minute: '2-digit'
      }),
      timeWindow: {
        start: new Date(item.delivery_date || item.date || new Date()).toLocaleTimeString('fr-FR', { hour: '2-digit', minute: '2-digit' }),
        end: new Date(new Date(item.delivery_date || item.date || new Date()).getTime() + 2 * 60 * 60 * 1000).toLocaleTimeString('fr-FR', { hour: '2-digit', minute: '2-digit' })
      },
      distanceFromCurrent: 0,
      estimatedTravelTime: 0,
      livraisonId: isLivraison ? itemId : null,
      etat: item.etat,
      isPlanification,
      isLivraison,
      history: [
        {
          id: `hist-${itemId}`,
          action: isPlanification ? 'Commande assign√©e' : 'Livraison d√©marr√©e',
          details: isPlanification ? 'Assign√©e au camion' : 'Chauffeur en route',
          timestamp: item.createdAt || new Date().toISOString(),
          userId: currentUser?.id || 'system',
          userName: currentUser?.name || 'Syst√®me',
        }
      ]
    };
  };

  const mapLivraisonStatus = (etat) => {
    switch (etat) {
      case 'PLANIFIE': return 'assigned';
      case 'EN_COURS': return 'en_route';
      case 'LIVRE': return 'delivered';
      case 'ECHEC': return 'failed';
      case 'ANNULE': return 'cancelled';
      default: return 'assigned';
    }
  };

  const orders = livraisons.map(transformLivraisonToOrder).filter(order => order !== null);
  
  const activeOrders = orders.filter(order =>
    !['delivered', 'cancelled', 'failed'].includes(order.status)
  );

  const sortedOrders = [...activeOrders].sort((a, b) => {
    const priorityOrder = { urgent: 4, high: 3, medium: 2, low: 1 };
    const priorityDiff = priorityOrder[b.priority] - priorityOrder[a.priority];
    if (priorityDiff !== 0) return priorityDiff;
    return (a.estimatedTravelTime || 0) - (b.estimatedTravelTime || 0);
  });

  const nextOrder = sortedOrders[0];

  // ‚úÖ D√âBOGAGE: Logs d√©taill√©s pour comprendre l'√©tat
  useEffect(() => {
    console.log('üîç [DEBUG] √âtat actuel:');
    console.log('  - Next order:', nextOrder);
    console.log('  - Next order status:', nextOrder?.status);
    console.log('  - Next order etat:', nextOrder?.etat);
    console.log('  - Next order planificationId:', nextOrder?.planificationId);
    console.log('  - Next order livraisonId:', nextOrder?.livraisonId);
    console.log('  - Selected order:', selectedOrder);
    console.log('  - Is tracking:', isTracking);
    console.log('  - Driver location:', driverLocation);
  }, [nextOrder, selectedOrder, isTracking, driverLocation]);

  const handleStartRoute = async (order) => {
    console.log('üéØ BOUTON D√âMARRER ROUTE CLIQU√â !', order);

    if (!order.planificationId) {
      setNotification({
        type: "error",
        message: "Impossible de d√©marrer la livraison - planification manquante"
      });
      return;
    }

    setLoading(true);
    try {
      // ‚úÖ NOUVEAU: V√©rifier d'abord si une livraison existe d√©j√†
      console.log('üîç V√©rification livraison existante pour planification:', order.planificationId);

      let livraisonId = null;

      try {
        const existingLivraisons = await livraisonService.getLivraisons({
          planificationId: order.planificationId,
          etat: 'EN_COURS'
        });

        if (existingLivraisons.data && existingLivraisons.data.length > 0) {
          const existingLivraison = existingLivraisons.data[0];
          livraisonId = existingLivraison.id || existingLivraison._id;
          console.log('‚úÖ Livraison existante trouv√©e:', livraisonId);
        }
      } catch (searchError) {
        console.log('‚ö†Ô∏è Erreur recherche livraison existante:', searchError.message);
      }

      // Si pas de livraison existante, en cr√©er une nouvelle
      if (!livraisonId) {
        const deliveryData = {
          latitude: driverLocation?.latitude || 33.274458833333334,
          longitude: driverLocation?.longitude || -7.581053666666666,
          details: `D√©marrage de la livraison pour ${order.customer.name}`
        };

        console.log('üöÄ Cr√©ation nouvelle livraison pour planification:', order.planificationId);
        console.log('üìç Donn√©es de livraison:', deliveryData);

        const startResult = await livraisonService.startLivraison(order.planificationId, deliveryData);
        console.log('üì¶ R√©sultat cr√©ation livraison:', startResult);

        livraisonId = startResult.data?._id || startResult._id;
        console.log('‚úÖ Nouvelle livraison cr√©√©e avec ID:', livraisonId);
      }

      if (!livraisonId) {
        throw new Error('Impossible d\'obtenir un ID de livraison');
      }

      // ‚úÖ NOUVEAU: Mettre √† jour imm√©diatement l'ordre s√©lectionn√©
      const updatedOrder = {
        ...order,
        livraisonId: livraisonId,
        isLivraison: true,
        isPlanification: false,
        status: 'en_route',
        etat: 'EN_COURS'
      };
      setSelectedOrder(updatedOrder);
      console.log('‚úÖ Ordre s√©lectionn√© mis √† jour IMM√âDIATEMENT avec ID livraison:', livraisonId);

      // ‚úÖ NOUVEAU: D√©marrer automatiquement le suivi GPS avec le bon ID
      if (!isTracking) {
        console.log('üéØ D√©marrage automatique du suivi GPS avec ID livraison...');
        setIsTracking(true);
        setNotification({ type: 'info', message: 'D√©marrage du suivi GPS...' });

        const watchId = navigator.geolocation.watchPosition(
          (position) => {
            const newPosition = {
              latitude: position.coords.latitude,
              longitude: position.coords.longitude
            };
            setDriverLocation(newPosition);
            console.log('üìç Position du chauffeur mise √† jour:', newPosition);

            // Utiliser l'ID de livraison pour le suivi
            if (isConnected && livraisonId) {
              console.log(`üì§ Envoi de la position pour l'ID LIVRAISON: ${livraisonId}`);
              updatePosition(livraisonId, newPosition.latitude, newPosition.longitude);
            }
          },
          (error) => {
            console.error('‚ùå Erreur de suivi GPS:', error);
            setNotification({ type: 'error', message: `Erreur GPS: ${error.message}` });
            setIsTracking(false);
          },
          { enableHighAccuracy: true, timeout: 20000, maximumAge: 0 }
        );

        watchIdRef.current = watchId;
      }

      await new Promise(resolve => setTimeout(resolve, 1000));
      await refreshDeliveryData();

      setNotification({
        type: "success",
        message: `Route d√©marr√©e vers ${order.customer.name} - Suivi GPS actif`
      });

      // ‚úÖ SUPPRIM√â: Plus d'ouverture Google Maps - utilisation de la carte int√©gr√©e
      console.log('‚úÖ Route d√©marr√©e - Suivi GPS actif sur la carte int√©gr√©e');

      setTimeout(() => setNotification(null), 5000);
    } catch (error) {
      console.error('üí• EXCEPTION d√©marrage route:', error);
      console.error('üí• D√©tails de l\'erreur:', error.response?.data || error.message);
      setNotification({
        type: "error",
        message: `Erreur lors du d√©marrage: ${error.response?.data?.message || error.message}`
      });
    } finally {
      setLoading(false);
    }
  };
  
  const handleStatusChange = async (order, newStatus, note = '') => {
    setLoading(true);
    try {
      const statusMapping = {
        'delivered': 'LIVRE',
        'failed': 'ECHEC',
        'cancelled': 'ANNULE'
      };
  
      let livraisonId = null;
  
      try {
        console.log('üîç Recherche livraison pour planification:', order.planificationId);
          
        const existingLivraisons = await livraisonService.getLivraisons({
          planification_id: order.planificationId,
          etat: 'EN_COURS'
        });
  
        if (existingLivraisons.data && existingLivraisons.data.length > 0) {
          const existingLivraison = existingLivraisons.data[0];
          livraisonId = existingLivraison.id || existingLivraison._id;
          console.log('‚úÖ Livraison existante trouv√©e:', livraisonId);
        }
      } catch (searchError) {
        console.error('‚ùå Erreur recherche livraison:', searchError);
      }
  
      if (!livraisonId && order.isPlanification && order.etat === 'PLANIFIE') {
        console.log('üìã Cr√©ation automatique de livraison pour planification');
          
        const deliveryData = {
          latitude: driverLocation?.latitude || 0,
          longitude: driverLocation?.longitude || 0,
          details: `D√©marrage automatique pour changement de statut`
        };
  
        const startResult = await livraisonService.startLivraison(order.planificationId, deliveryData);
        livraisonId = startResult.data?._id || startResult._id;
          
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
  
      if (!livraisonId) {
        throw new Error('Impossible de trouver ou cr√©er une livraison');
      }
  
      const completionData = {
        latitude: driverLocation?.latitude || 0,
        longitude: driverLocation?.longitude || 0,
        details: note,
        commentaires_livreur: note,
        etat: statusMapping[newStatus] || 'LIVRE'
      };
  
      console.log('üì§ Finalisation livraison:', livraisonId, 'avec statut:', statusMapping[newStatus]);
      await livraisonService.completeLivraison(livraisonId, completionData);
  
      await new Promise(resolve => setTimeout(resolve, 1500));
      await refreshDeliveryData();
  
      setIsStatusModalOpen(false);
      setStatusNote('');
  
      const statusText = {
        'delivered': 'livr√©e',
        'failed': 'annul√©e (√©chec)',
        'cancelled': 'annul√©e'
      };
  
      setNotification({
        type: "success",
        message: `Commande ${order.orderNumber} marqu√©e comme ${statusText[newStatus]}`
      });
  
      setTimeout(() => setNotification(null), 5000);
    } catch (error) {
      console.error('üí• EXCEPTION changement statut:', error);
      setNotification({
        type: "error",
        message: "Erreur lors de la mise √† jour du statut"
      });
    } finally {
      setLoading(false);
    }
  };
  
  const getPriorityColor = (priority) => {
    switch (priority) {
      case "urgent": return "nom-priority-urgent";
      case "high": return "nom-priority-high";
      case "medium": return "nom-priority-medium";
      case "low": return "nom-priority-low";
      default: return "nom-priority-default";
    }
  };
  
  const getPriorityText = (priority) => {
    switch (priority) {
      case "urgent": return "Urgente";
      case "high": return "Haute";
      case "medium": return "Moyenne";
      case "low": return "Basse";
      default: return priority;
    }
  };
  
  const getPriorityIcon = (priority) => {
    switch (priority) {
      case "urgent":
      case "high":
        return <ArrowUp className="nom-priority-icon" />;
      case "medium":
        return <Minus className="nom-priority-icon" />;
      case "low":
        return <ArrowDown className="nom-priority-icon" />;
      default:
        return null;
    }
  };
  
  const getStatusColor = (status) => {
    switch (status) {
      case "assigned": return "nom-status-assigned";
      case "en_route": return "nom-status-en-route";
      case "delivered": return "nom-status-delivered";
      case "failed": return "nom-status-failed";
      case "cancelled": return "nom-status-cancelled";
      default: return "nom-status-default";
    }
  };
  
  const getStatusText = (status) => {
    switch (status) {
      case "assigned": return "Assign√©e";
      case "en_route": return "En route";
      case "delivered": return "Livr√©e";
      case "failed": return "√âchec";
      case "cancelled": return "Annul√©e";
      default: return status;
    }
  };
  
  const handleViewDetails = (order) => {
    setSelectedOrder(order);
    setIsDetailsModalOpen(true);
  };
  
  const getMapMarkerColor = (priority) => {
    switch (priority) {
      case "urgent": return "#ef4444";
      case "high": return "#f97316";
      case "medium": return "#eab308";
      case "low": return "#22c55e";
      default: return "#6b7280";
    }
  };
  
  if (loading && livraisons.length === 0) {
    return (
      <div className="nom-layout">
        <div className="nom-wrapper">
          <div className="nom-container">
            <div className="nom-loading-container">
              <Loader2 className="nom-loading-spinner" />
              <p>Chargement de vos livraisons...</p>
            </div>
          </div>
        </div>
      </div>
    );
  }
  
  return (
    <div className="nom-layout">
      <div className="nom-wrapper">
        <div className="nom-container">
          <main className="nom-main">
            <div className="nom-page-header">
              <h2 className="nom-page-title">Carte des Prochaines Commandes</h2>
              <p className="nom-page-subtitle">Visualisez vos commandes assign√©es et planifiez votre itin√©raire</p>
            </div>
  
            {/* Notification */}
            {notification && (
              <div className={`nom-alert nom-alert-${notification.type}`}>
                {notification.type === "success" ? (
                  <CheckCircle className="nom-alert-icon" />
                ) : notification.type === "error" ? (
                  <AlertTriangle className="nom-alert-icon" />
                ) : (
                  <Target className="nom-alert-icon" />
                )}
                <div className="nom-alert-content">
                  {notification.message}
                </div>
              </div>
            )}
  
            {/* Next Order Priority Card */}
            {nextOrder && (
              <div className="nom-card nom-priority-card">
                <div className="nom-card-header">
                  <div className="nom-card-title">
                    <Target className="nom-card-icon" />
                    <span>Prochaine Commande Prioritaire</span>
                  </div>
                </div>
                <div className="nom-card-content">
                  <div className="nom-priority-content">
                    <div className="nom-priority-info">
                      <div className="nom-badges">
                        <span className={`nom-badge ${getPriorityColor(nextOrder.priority)}`}>
                          {getPriorityIcon(nextOrder.priority)}
                          <span className="nom-badge-text">{getPriorityText(nextOrder.priority)}</span>
                        </span>
                        <span className={`nom-badge ${getStatusColor(nextOrder.status)}`}>
                          {getStatusText(nextOrder.status)}
                        </span>
                      </div>
                      <h3 className="nom-customer-name">{nextOrder.customer.name}</h3>
                      <p className="nom-order-number">Commande: {nextOrder.orderNumber}</p>
                      <div className="nom-order-details">
                        <div className="nom-detail-item">
                          <MapPin className="nom-detail-icon" />
                          <span>
                            {nextOrder.deliveryAddress.street}, {nextOrder.deliveryAddress.city}
                          </span>
                        </div>
                      </div>
                    </div>
                    <div className="nom-priority-actions">
                      <button
                        className="nom-btn nom-btn-secondary"
                        onClick={() => handleViewDetails(nextOrder)}
                      >
                        D√©tails
                      </button>
                        
                      <button
                        className="nom-btn nom-btn-success"
                        onClick={() => {
                          setSelectedOrder(nextOrder);
                          setStatusAction('delivered');
                          setIsStatusModalOpen(true);
                        }}
                        disabled={loading}
                      >
                        <CheckCircle className="nom-btn-icon" />
                        Marquer Livr√©
                      </button>
  
                      <button
                        className="nom-btn nom-btn-danger"
                        onClick={() => {
                          setSelectedOrder(nextOrder);
                          setStatusAction('failed');
                          setIsStatusModalOpen(true);
                        }}
                        disabled={loading}
                      >
                        <X className="nom-btn-icon" />
                        √âchec
                      </button>
  
                      {/* ‚úÖ D√âBOGAGE: Toujours afficher le bouton pour test */}
                      <button
                        className="nom-btn nom-btn-primary"
                        onClick={() => {
                          console.log('üéØ CLIC SUR D√âMARRER ROUTE !');
                          console.log('Order √† d√©marrer:', nextOrder);
                          handleStartRoute(nextOrder);
                        }}
                        disabled={loading || !nextOrder}
                        style={{
                          backgroundColor: nextOrder?.status === "assigned" ? '' : '#orange',
                          opacity: nextOrder?.status === "assigned" ? 1 : 0.7
                        }}
                      >
                        {loading ? (
                          <>
                            <Loader2 className="nom-btn-icon nom-spinner" />
                            D√©marrage...
                          </>
                        ) : (
                          <>
                            <Navigation className="nom-btn-icon" />
                            {nextOrder?.status === "assigned" ? "D√©marrer Route" : `Forcer D√©marrage (${nextOrder?.status})`}
                          </>
                        )}
                      </button>

                      <button  
                        className="nom-btn nom-btn-warning"  
                        onClick={() => {  
                          console.log('üîÑ Force refresh carte chauffeur');  
                          window.location.reload();  
                        }}  
                        disabled={loading}  
                      >  
                        üîÑ Recharger  
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            )}
            <div className="nom-content-grid">
              {/* Map Section */}
              <div className="nom-map-section">
                <div className="nom-card nom-map-card">
                  <div className="nom-card-header">
                    <div className="nom-card-title">
                      <MapPin className="nom-card-icon" />
                      <span>Carte Interactive</span>
                    </div>
                    {/* ‚úÖ SUPPRIM√â: Boutons de suivi GPS - d√©marrage automatique */}
                    <div className="nom-tracking-status">
                      {isTracking ? (
                        <span style={{ color: '#28a745', fontWeight: 'bold' }}>
                          üéØ Suivi GPS actif
                        </span>
                      ) : (
                        <span style={{ color: '#6c757d' }}>
                          üìç Suivi GPS inactif
                        </span>
                      )}
                    </div>
                  </div>
                  <div className="nom-card-content nom-map-content">
                    {/* ‚úÖ Le composant de carte r√©el est maintenant ici */}
                    <RealDeliveryMap
                      orders={activeOrders}
                      currentLocation={driverLocation}
                      onOrderSelect={handleViewDetails}
                      className="nom-real-map"
                    />

                
                  </div>
                </div>
              </div>
  
              {/* Orders List */}
              <div className="nom-orders-section">
                <div className="nom-card nom-orders-card">
                  <div className="nom-card-header">
                    <div className="nom-card-title">
                      <Package className="nom-card-icon" />
                      <span>Mes Commandes</span>
                    </div>
                    <span className="nom-orders-count">{activeOrders.length} commandes</span>
                  </div>
                  <div className="nom-card-content nom-orders-content">
                    <div className="nom-orders-list">
                      {sortedOrders.map((order, index) => (
                        <div
                          key={order.id}
                          className={`nom-order-item ${
                            order.id === nextOrder?.id ? "nom-order-next" : ""
                          }`}
                          onClick={() => handleViewDetails(order)}
                        >
                          <div className="nom-order-header">
                            <div className="nom-order-left">
                              <div
                                className="nom-order-marker"
                                style={{ backgroundColor: getMapMarkerColor(order.priority) }}
                              >
                                {index + 1}
                              </div>
                              <span className={`nom-badge ${getPriorityColor(order.priority)}`}>
                                {getPriorityIcon(order.priority)}
                                <span className="nom-badge-text">{getPriorityText(order.priority)}</span>
                              </span>
                            </div>
                            <span className={`nom-badge ${getStatusColor(order.status)}`}>
                              {getStatusText(order.status)}
                            </span>
                          </div>
  
                          <h3 className="nom-order-customer">{order.customer.name}</h3>
                          <p className="nom-order-number">{order.orderNumber}</p>
  
                          <div className="nom-order-info">
                            <div className="nom-order-detail">
                              <MapPin className="nom-order-icon" />
                              <span className="nom-order-address">
                                {order.deliveryAddress.street}, {order.deliveryAddress.city}
                              </span>
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </main>
        </div>
      </div>
  
      {/* Details Modal */}
      {isDetailsModalOpen && selectedOrder && (
        <div className="nom-modal-overlay" onClick={() => setIsDetailsModalOpen(false)}>
          <div className="nom-modal-content" onClick={(e) => e.stopPropagation()}>
            <div className="nom-modal-header">
              <div className="nom-modal-title">
                <Eye className="nom-modal-icon" />
                <span>D√©tails de la Commande</span>
              </div>
              <button
                className="nom-modal-close"
                onClick={() => setIsDetailsModalOpen(false)}
              >
                <X className="nom-close-icon" />
              </button>
            </div>
  
            <div className="nom-modal-body">
              <div className="nom-details-grid">
                {/* Customer Info */}
                <div className="nom-details-section">
                  <div className="nom-details-card">
                    <div className="nom-details-header">
                      <h4 className="nom-details-title">Informations Client</h4>
                    </div>
                    <div className="nom-details-content">
                      <div className="nom-detail-row">
                        <span className="nom-detail-label">Nom:</span>
                        <span className="nom-detail-value">{selectedOrder.customer.name}</span>
                      </div>
                      <div className="nom-detail-row">
                        <Phone className="nom-detail-icon" />
                        <span className="nom-detail-value">{selectedOrder.customer.phone}</span>
                      </div>
                      {selectedOrder.customer.email && (
                        <div className="nom-detail-row">
                          <Email className="nom-detail-icon" />
                          <span className="nom-detail-value">{selectedOrder.customer.email}</span>
                        </div>
                      )}
                    </div>
                  </div>
                </div>
  
                {/* Delivery Info */}
                <div className="nom-details-section">
                  <div className="nom-details-card">
                    <div className="nom-details-header">
                      <h4 className="nom-details-title">D√©tails de la Livraison</h4>
                    </div>
                    <div className="nom-details-content">
                      <div className="nom-detail-row">
                        <span className="nom-detail-label">N¬∞ de Commande:</span>
                        <span className="nom-detail-value">{selectedOrder.orderNumber}</span>
                      </div>
                      <div className="nom-detail-row">
                        <span className="nom-detail-label">Adresse:</span>
                        <span className="nom-detail-value">
                          {selectedOrder.deliveryAddress.street}, {selectedOrder.deliveryAddress.city}
                        </span>
                      </div>
                      <div className="nom-detail-row">
                        <span className="nom-detail-label">Statut:</span>
                        <span className={`nom-detail-value ${getStatusColor(selectedOrder.status)}`}>
                          {getStatusText(selectedOrder.status)}
                        </span>
                      </div>
                      <div className="nom-detail-row">
                        <span className="nom-detail-label">Cr√©√©e le:</span>
                        <span className="nom-detail-value">
                          {new Date(selectedOrder.orderDate).toLocaleDateString('fr-FR')}
                        </span>
                      </div>
                      <div className="nom-detail-row">
                        <span className="nom-detail-label">Notes client:</span>
                        <span className="nom-detail-value">
                          {selectedOrder.customerNotes || "Aucune"}
                        </span>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
  
              {/* Products Section */}
              {selectedOrder.products.length > 0 && (
                <div className="nom-details-section">
                  <div className="nom-details-card">
                    <div className="nom-details-header">
                      <h4 className="nom-details-title">Liste des Produits</h4>
                    </div>
                    <div className="nom-details-content">
                      <ul className="nom-product-list">
                        {selectedOrder.products.map((product, index) => (
                          <li key={index} className="nom-product-item">
                            {product.quantite}x {product.produit_id?.name || 'Produit inconnu'}
                          </li>
                        ))}
                      </ul>
                    </div>
                  </div>
                </div>
              )}
  
            </div>
            <div className="nom-modal-actions">
              <button
                className="nom-btn nom-btn-secondary"
                onClick={() => setIsDetailsModalOpen(false)}
              >
                Fermer
              </button>
            </div>
          </div>
        </div>
      )}
  
      {/* Status Modal */}
      {isStatusModalOpen && selectedOrder && (
        <div className="nom-modal-overlay" onClick={() => setIsStatusModalOpen(false)}>
          <div className="nom-modal-content" onClick={(e) => e.stopPropagation()}>
            <div className="nom-modal-header">
              <div className="nom-modal-title">
                {statusAction === 'delivered' ? (
                  <>
                    <CheckCircle className="nom-modal-icon" />
                    <span>Marquer comme livr√©</span>
                  </>
                ) : (
                  <>
                    <X className="nom-modal-icon" />
                    <span>Marquer comme √©chec</span>
                  </>
                )}
              </div>
              <button
                className="nom-modal-close"
                onClick={() => setIsStatusModalOpen(false)}
              >
                <X className="nom-close-icon" />
              </button>
            </div>
  
            <div className="nom-modal-body">  
              <div className="nom-status-info">  
                <h3 className="nom-status-customer">{selectedOrder.customer.name}</h3>  
                <p className="nom-status-order">Commande: {selectedOrder.orderNumber}</p>  
                <p>Confirmez le statut pour cette commande.</p>  
              </div>  
              <div className="nom-form-group">  
                <label className="nom-form-label">Commentaire:</label>  
                <textarea  
                  className="nom-form-textarea"  
                  rows="4"  
                  placeholder="Ajouter une note ou un commentaire (obligatoire pour un √©chec)"  
                  value={statusNote}  
                  onChange={(e) => setStatusNote(e.target.value)}  
                ></textarea>  
              </div>  
            </div>
  
            <div className="nom-modal-actions">
              <button
                className="nom-btn nom-btn-secondary"
                onClick={() => setIsStatusModalOpen(false)}
                disabled={loading}
              >
                Annuler
              </button>
              <button
                className={`nom-btn ${statusAction === 'delivered' ? 'nom-btn-success' : 'nom-btn-danger'}`}
                onClick={() => handleStatusChange(selectedOrder, statusAction, statusNote)}
                disabled={loading || (statusAction === 'failed' && !statusNote.trim())}
              >
                {loading ? (
                  <>
                    <Loader2 className="nom-btn-icon nom-spinner" />
                    Envoi...
                  </>
                ) : (
                  <span>Confirmer</span>
                )}
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}